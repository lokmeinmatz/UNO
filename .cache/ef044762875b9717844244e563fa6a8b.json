{"dependencies":[{"name":"D:\\Programmieren\\GitHub\\UNO\\tsconfig.json","includedInParent":true,"mtime":1518819454857},{"name":"./UI","loc":{"line":3,"column":21}},{"name":"./jquery","loc":{"line":4,"column":18}}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UI_1 = require(\"./UI\");\r\nconst $ = require(\"./jquery\");\r\nclass EmptyState {\r\n    removeListeners() {\r\n        console.info(\"Empty State has no Listeners\");\r\n    }\r\n}\r\nconst UserData = { id: \"\", currentName: \"\" };\r\nclass JoinState {\r\n    constructor(socket) {\r\n        this.socket = socket;\r\n        //handle join \r\n        $(\"#join-session-tab form\").submit(function (event) {\r\n            event.preventDefault();\r\n            //Send reqest to join\r\n            const sid = $(this).find(\"#sessionID\").val();\r\n            const nick = $(this).find(\"#nickname\").val();\r\n            console.log(`trying to join ${sid} with nick ${nick}`);\r\n            socket.emit(\"join\", { sessionID: sid, nickname: nick });\r\n            return false;\r\n        });\r\n        //handle create\r\n        $(\"#create-session-tab form\").submit(function (event) {\r\n            event.preventDefault();\r\n            //Send reqest to join\r\n            const nick = $(this).find(\"#nickname\").val();\r\n            console.log(`trying to create session with nick ${nick}`);\r\n            socket.emit(\"create\", nick);\r\n            return false;\r\n        });\r\n        //get join-response\r\n        socket.on(\"join.res\", (res) => {\r\n            console.log(res);\r\n            if (res.success) {\r\n                //Get to waiting lobby\r\n                UI_1.default.setModal(\"waiting\");\r\n                UserData.id = res.playerID;\r\n                //Switch to waiting state\r\n                userState.setState(new WaitingState(socket));\r\n            }\r\n            else {\r\n                //display error\r\n                alert(\"Error on joining/creating session\");\r\n            }\r\n        });\r\n    }\r\n    removeListeners() {\r\n        $(\"#join-session-tab form\").off(\"submit\");\r\n        $(\"#create-session-tab form\").off(\"submit\");\r\n        this.socket.removeAllListeners(\"join.res\");\r\n    }\r\n}\r\nexports.JoinState = JoinState;\r\nclass WaitingState {\r\n    constructor(socket) {\r\n        this.socket = socket;\r\n        //ready \r\n        //handle ready\r\n        $(\".modal#waiting button\").click(function () {\r\n            let ready = false;\r\n            if ($(this).hasClass(\"ready\")) {\r\n                $(this).removeClass(\"ready\");\r\n                $(this).text(\"I'M READY\");\r\n            }\r\n            else {\r\n                $(this).addClass(\"ready\");\r\n                $(this).text(\"WAIT FOR PLAYERS\");\r\n                ready = true;\r\n            }\r\n            console.log(`Player is ready: ${ready}`);\r\n            socket.emit(\"waiting.ready\", ready);\r\n        });\r\n        //update waiting screen\r\n        socket.on(\"waiting.update.res\", (data) => {\r\n            console.log(\"received waiting.update\");\r\n            //Set session id\r\n            $(\".modal#waiting h1\").text(\"SessionID: \" + data.sessionID);\r\n            const root = $(\".modal#waiting table\");\r\n            root.children().remove();\r\n            for (let player of data.players) {\r\n                const tr = $(\"<tr>\");\r\n                tr.append(\"<td>\" + player.name + \"</td>\");\r\n                tr.append(\"<td>\" + player.id + \"</td>\");\r\n                if (player.ready)\r\n                    tr.append(\"<td><i class='material-icons'>done</i></td>\");\r\n                else\r\n                    tr.append(\"<td><i class='material-icons'>cached</i></td>\");\r\n                root.append(tr);\r\n            }\r\n        });\r\n        socket.emit(\"waiting.update.req\");\r\n        //Start game\r\n        socket.on(\"game.start\", () => {\r\n            UI_1.default.setModalVisiblilty(false);\r\n            console.log(\"game starting\");\r\n            //set playing state\r\n            userState.setState(new PlayState(socket));\r\n        });\r\n    }\r\n    removeListeners() {\r\n        $(\".modal#waiting button\").off(\"click\");\r\n        this.socket.removeAllListeners(\"waiting.update\");\r\n        this.socket.removeAllListeners(\"game.start\");\r\n    }\r\n}\r\nclass PlayState {\r\n    constructor(socket) {\r\n        this.socket = socket;\r\n        //do the game update\r\n        socket.on(\"game.update\", (gameData) => {\r\n            console.log(\"received game.update\");\r\n            UI_1.default.setOtherPlayers(gameData.players.filter(player => player.id != UserData.id), gameData.activePlayerID);\r\n            if (gameData.activePlayerID == UserData.id) {\r\n                UI_1.default.setIamActive(true);\r\n            }\r\n            else {\r\n                UI_1.default.setIamActive(false);\r\n            }\r\n        });\r\n    }\r\n    removeListeners() {\r\n        this.socket.removeAllListeners(\"game.update\");\r\n    }\r\n}\r\nclass UserStateManager {\r\n    constructor() { this.state = new EmptyState(); }\r\n    setState(newState) {\r\n        this.state.removeListeners();\r\n        this.state = newState;\r\n    }\r\n}\r\nlet userState = new UserStateManager();\r\nexports.default = userState;\r\n","map":{"version":3,"file":"States.js","sourceRoot":"","sources":["States.ts"],"names":[],"mappings":";;AACA,6BAAqB;AACrB,MAAM,CAAC,GAAkB,OAAO,CAAC,UAAU,CAAC,CAAA;AAW5C;IAGI,eAAe;QACX,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA;IAChD,CAAC;CACJ;AAED,MAAM,QAAQ,GAAqC,EAAC,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAC,CAAA;AAG5E;IAMI,YAAY,MAAwB;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB,cAAc;QACd,CAAC,CAAC,wBAAwB,CAAC,CAAC,MAAM,CAAC,UAAS,KAAK;YAC7C,KAAK,CAAC,cAAc,EAAE,CAAA;YACtB,qBAAqB;YACrB,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAA;YAC5C,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAA;YAC5C,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,cAAc,IAAI,EAAE,CAAC,CAAA;YACtD,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,SAAS,EAAG,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAA;YACtD,MAAM,CAAC,KAAK,CAAA;QAChB,CAAC,CAAC,CAAA;QAGF,eAAe;QACf,CAAC,CAAC,0BAA0B,CAAC,CAAC,MAAM,CAAC,UAAS,KAAK;YAC/C,KAAK,CAAC,cAAc,EAAE,CAAA;YACtB,qBAAqB;YACrB,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAA;YAC5C,OAAO,CAAC,GAAG,CAAC,sCAAsC,IAAI,EAAE,CAAC,CAAA;YACzD,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;YAC3B,MAAM,CAAC,KAAK,CAAA;QAChB,CAAC,CAAC,CAAA;QAEF,mBAAmB;QACnB,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YAChB,EAAE,CAAA,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,sBAAsB;gBACtB,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;gBACtB,QAAQ,CAAC,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAA;gBAE1B,yBAAyB;gBACzB,SAAS,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAA;YAChD,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,eAAe;gBACf,KAAK,CAAC,mCAAmC,CAAC,CAAA;YAC9C,CAAC;QACL,CAAC,CAAC,CAAA;IAGN,CAAC;IAGD,eAAe;QACX,CAAC,CAAC,wBAAwB,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACzC,CAAC,CAAC,0BAA0B,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAC3C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;IAC9C,CAAC;CAEJ;AA1DD,8BA0DC;AAED;IAII,YAAY,MAAwB;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB,QAAQ;QACR,cAAc;QACd,CAAC,CAAC,uBAAuB,CAAC,CAAC,KAAK,CAAC;YAE7B,IAAI,KAAK,GAAG,KAAK,CAAA;YACjB,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;gBAC5B,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAE7B,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;gBACzB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;gBAChC,KAAK,GAAG,IAAI,CAAA;YAChB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAA;YACxC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAA;QAEvC,CAAC,CAAC,CAAA;QAEF,uBAAuB;QACvB,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,IAAI,EAAE,EAAE;YAErC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAA;YAEtC,gBAAgB;YAChB,CAAC,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,aAAa,GAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAEzD,MAAM,IAAI,GAAG,CAAC,CAAC,sBAAsB,CAAC,CAAA;YACtC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAA;YACxB,GAAG,CAAA,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7B,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,CAAA;gBACpB,EAAE,CAAC,MAAM,CAAC,MAAM,GAAC,MAAM,CAAC,IAAI,GAAC,OAAO,CAAC,CAAA;gBACrC,EAAE,CAAC,MAAM,CAAC,MAAM,GAAC,MAAM,CAAC,EAAE,GAAC,OAAO,CAAC,CAAA;gBACnC,EAAE,CAAA,CAAC,MAAM,CAAC,KAAK,CAAC;oBAAA,EAAE,CAAC,MAAM,CAAC,6CAA6C,CAAC,CAAA;gBACxE,IAAI;oBAAC,EAAE,CAAC,MAAM,CAAC,+CAA+C,CAAC,CAAA;gBAC/D,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YACnB,CAAC;QACL,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QAEjC,YAAY;QACZ,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;YACzB,YAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;YAC5B,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;YAC5B,mBAAmB;YACnB,SAAS,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACN,CAAC;IAED,eAAe;QACX,CAAC,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAA;QAChD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAA;IAChD,CAAC;CAEJ;AAED;IAGI,YAAY,MAAwB;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB,oBAAoB;QACpB,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,QAAqB,EAAE,EAAE;YAC/C,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAA;YACnC,YAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAA;YACxG,EAAE,CAAA,CAAC,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxC,YAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACzB,CAAC;YACD,IAAI,CAAA,CAAC;gBAAC,YAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;YAAC,CAAC;QAClC,CAAC,CAAC,CAAA;IACN,CAAC;IAED,eAAe;QACX,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAA;IACjD,CAAC;CACJ;AAED;IAEI,gBAAe,IAAI,CAAC,KAAK,GAAG,IAAI,UAAU,EAAE,CAAA,CAAA,CAAC;IAE7C,QAAQ,CAAC,QAAoB;QACzB,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAA;IACzB,CAAC;CACJ;AAED,IAAI,SAAS,GAAsB,IAAI,gBAAgB,EAAE,CAAA;AACzD,kBAAe,SAAS,CAAA","sourcesContent":["\r\nimport UI from \"./UI\"\r\nconst $ : JQueryStatic = require(\"./jquery\")\r\nimport {GameUpdate} from \"./utils\"\r\n\r\ninterface UserState {\r\n    socket : SocketIO.Socket\r\n\r\n    \r\n\r\n    removeListeners()\r\n}\r\n\r\nclass EmptyState implements UserState {\r\n    socket : SocketIO.Socket\r\n\r\n    removeListeners() {\r\n        console.info(\"Empty State has no Listeners\")\r\n    }\r\n}\r\n\r\nconst UserData: {id:string, currentName: string} = {id: \"\", currentName: \"\"}\r\n\r\n\r\nexport class JoinState implements UserState {\r\n    socket : SocketIO.Socket\r\n\r\n\r\n\r\n\r\n    constructor(socket : SocketIO.Socket) {\r\n        this.socket = socket\r\n\r\n        //handle join \r\n        $(\"#join-session-tab form\").submit(function(event) {\r\n            event.preventDefault()\r\n            //Send reqest to join\r\n            const sid = $(this).find(\"#sessionID\").val()\r\n            const nick = $(this).find(\"#nickname\").val()\r\n            console.log(`trying to join ${sid} with nick ${nick}`)\r\n            socket.emit(\"join\", {sessionID : sid, nickname: nick})\r\n            return false\r\n        })\r\n\r\n\r\n        //handle create\r\n        $(\"#create-session-tab form\").submit(function(event) {\r\n            event.preventDefault()\r\n            //Send reqest to join\r\n            const nick = $(this).find(\"#nickname\").val()\r\n            console.log(`trying to create session with nick ${nick}`)\r\n            socket.emit(\"create\", nick)\r\n            return false\r\n        })\r\n\r\n        //get join-response\r\n        socket.on(\"join.res\", (res) => {\r\n            console.log(res)\r\n            if(res.success) {\r\n                //Get to waiting lobby\r\n                UI.setModal(\"waiting\")\r\n                UserData.id = res.playerID\r\n\r\n                //Switch to waiting state\r\n                userState.setState(new WaitingState(socket))\r\n            }\r\n            else {\r\n                //display error\r\n                alert(\"Error on joining/creating session\")\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    removeListeners() {\r\n        $(\"#join-session-tab form\").off(\"submit\")\r\n        $(\"#create-session-tab form\").off(\"submit\")\r\n        this.socket.removeAllListeners(\"join.res\")\r\n    }\r\n\r\n}\r\n\r\nclass WaitingState implements UserState {\r\n    socket : SocketIO.Socket\r\n\r\n\r\n    constructor(socket : SocketIO.Socket) {\r\n        this.socket = socket\r\n\r\n        //ready \r\n        //handle ready\r\n        $(\".modal#waiting button\").click(function() {\r\n            \r\n            let ready = false\r\n            if($(this).hasClass(\"ready\")) {\r\n                $(this).removeClass(\"ready\")\r\n                $(this).text(\"I'M READY\")\r\n                \r\n            }\r\n            else {\r\n                $(this).addClass(\"ready\")\r\n                $(this).text(\"WAIT FOR PLAYERS\")\r\n                ready = true\r\n            }\r\n            console.log(`Player is ready: ${ready}`)\r\n            socket.emit(\"waiting.ready\", ready)\r\n            \r\n        })\r\n\r\n        //update waiting screen\r\n        socket.on(\"waiting.update.res\", (data) => {\r\n\r\n            console.log(\"received waiting.update\")\r\n            \r\n            //Set session id\r\n            $(\".modal#waiting h1\").text(\"SessionID: \"+data.sessionID)\r\n\r\n            const root = $(\".modal#waiting table\")\r\n            root.children().remove()\r\n            for(let player of data.players) {\r\n                const tr = $(\"<tr>\")\r\n                tr.append(\"<td>\"+player.name+\"</td>\")\r\n                tr.append(\"<td>\"+player.id+\"</td>\")\r\n                if(player.ready)tr.append(\"<td><i class='material-icons'>done</i></td>\")\r\n                else tr.append(\"<td><i class='material-icons'>cached</i></td>\")\r\n                root.append(tr)\r\n            }\r\n        })\r\n        socket.emit(\"waiting.update.req\")\r\n\r\n        //Start game\r\n        socket.on(\"game.start\", () => {\r\n            UI.setModalVisiblilty(false)\r\n            console.log(\"game starting\")\r\n            //set playing state\r\n            userState.setState(new PlayState(socket))\r\n        })\r\n    }\r\n\r\n    removeListeners() {\r\n        $(\".modal#waiting button\").off(\"click\")\r\n        this.socket.removeAllListeners(\"waiting.update\")\r\n        this.socket.removeAllListeners(\"game.start\")\r\n    }\r\n\r\n}\r\n\r\nclass PlayState implements UserState {\r\n    socket : SocketIO.Socket\r\n\r\n    constructor(socket : SocketIO.Socket) {\r\n        this.socket = socket\r\n\r\n        //do the game update\r\n        socket.on(\"game.update\", (gameData : GameUpdate) => {\r\n            console.log(\"received game.update\")\r\n            UI.setOtherPlayers(gameData.players.filter(player => player.id != UserData.id), gameData.activePlayerID)\r\n            if(gameData.activePlayerID == UserData.id) {\r\n                UI.setIamActive(true)\r\n            }\r\n            else{ UI.setIamActive(false) }\r\n        })\r\n    }\r\n\r\n    removeListeners() {\r\n        this.socket.removeAllListeners(\"game.update\")\r\n    }\r\n}\r\n\r\nclass UserStateManager {\r\n    private state : UserState\r\n    constructor() {this.state = new EmptyState()}\r\n\r\n    setState(newState : UserState) {\r\n        this.state.removeListeners()\r\n        this.state = newState\r\n    }\r\n}\r\n\r\nlet userState : UserStateManager = new UserStateManager()\r\nexport default userState"]}},"hash":"66363a76c665563d17e75e8ef6f67066","cacheData":{"env":{}}}